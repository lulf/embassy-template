[package]
edition = "2024"
name = "{{project-name}}"
version = "0.1.0"
authors = ["{{authors}}"]
resolver = "3"

[[bin]]
name = "{{project-name}}"
test = false
bench = false

[dependencies]
defmt = "0.3"
defmt-rtt = "0.4"
panic-probe = { version = "0.3", features = ["print-defmt"] }

embedded-hal = "1.0.0"
embedded-hal-async = "1.0.0"
embedded-io = "0.6.1"
embedded-io-async = "0.6.1"
embedded-storage = "0.3.1"

cortex-m-rt = "0.7.3"

{% if chip contains "nrf52" -%}
cortex-m = { version = "0.7.7", features = ["critical-section-single-core"] }
embassy-nrf = { version = "0.3", features = ["defmt", "{{ chip }}", "time-driver-rtc1", "gpiote", "unstable-pac", "time"] }
{% endif -%}

{% if chip contains "nrf9151" -%}
embassy-nrf = { git="https://github.com/embassy-rs/embassy.git", features = ["defmt", "nrf9151-s", "time-driver-rtc1", "gpiote", "unstable-pac", "time"] }
{% endif -%}

{% if chip contains "nrf9160" -%}
embassy-nrf = { git="https://github.com/embassy-rs/embassy.git", features = ["defmt", "nrf9160-s", "time-driver-rtc1", "gpiote", "unstable-pac", "time"] }
{% endif -%}

{% if chip contains "nrf91" -%}
cortex-m = { version = "0.7.7", features = ["critical-section-single-core"] }
# Due to embassy-net-nrf91 not yet being published to crates.io we need to use git versions of repos
embassy-executor = { git="https://github.com/embassy-rs/embassy.git", features = ["task-arena-size-32768", "arch-cortex-m", "executor-thread", "defmt", "executor-interrupt"] }
embassy-time = { git="https://github.com/embassy-rs/embassy.git", features = ["defmt", "defmt-timestamp-uptime"] }
embassy-net-nrf91 = { git="https://github.com/embassy-rs/embassy.git", features = ["defmt"]}
embassy-net = { git="https://github.com/embassy-rs/embassy.git", features = ["defmt", "tcp", "proto-ipv4", "medium-ip", "dns"] }
{% else -%}
embassy-executor = { version = "0.7", features = ["task-arena-size-1024", "arch-cortex-m", "executor-thread", "defmt", "executor-interrupt"] }
embassy-sync = { version = "0.6" }
embassy-time = { version = "0.4", features = ["defmt", "defmt-timestamp-uptime"] }
{% endif -%}

{% if chip contains "rp2040" -%}
cortex-m = { version = "0.7.7" }
embassy-rp = { version = "0.4", features = ["defmt", "unstable-pac", "time-driver", "critical-section-impl", "rp2040"] }
{% endif -%}

{% if chip == "rp2350a" or chip == "rp2354a" -%}
cortex-m = { version = "0.7.7" }
embassy-rp = { version = "0.4", features = ["defmt", "unstable-pac", "time-driver", "critical-section-impl", "rp235xa"] }
{% endif -%}

{% if chip == "rp2350b" or chip == "rp2354b" -%}
cortex-m = { version = "0.7.7" }
embassy-rp = { version = "0.4", features = ["defmt", "unstable-pac", "time-driver", "critical-section-impl", "rp235xb"] }
{% endif -%}

{% if chip contains "stm32" -%}
cortex-m = { version = "0.7.7", features = ["critical-section-single-core"] }
embassy-stm32 = { version = "0.2", features = ["defmt", "{{ chip }}", "unstable-pac", "memory-x", "time-driver-any" ]  }
{% endif -%}

[profile.release]
debug = 2
lto = true
opt-level = 'z'

[profile.dev]
debug = 2
lto = true
opt-level = "z"

[lints.rust]
future_incompatible = { level = "warn", priority = -1 }
rust_2018_compatibility = { level = "warn", priority = -1 }
rust_2018_idioms = { level = "warn", priority = -1 }
rust_2021_compatibility = { level = "warn", priority = -1 }
rust_2024_compatibility = { level = "warn", priority = -1 }
# To use the `unsafe` keyword, do not remove the `unsafe_code = "forbid"` entry.
# Instead, prefer to change it to `unsafe_code = "deny"` + opt-in with local use of
# `#[allow(unsafe_code)]`'s on an as needed basis.
bare_trait_objects = "forbid"
unsafe_code = "forbid"
unused_variables = "warn"

[lints.clippy]
blanket_clippy_restriction_lints = "allow"
doc_markdown = "allow"
enum_glob_use = "forbid"
enum_variant_names = "allow"
equatable_if_let = "allow"
error_impl_error = "allow"
exhaustive_structs = "allow"
# False-positive with `embassy_executor::Spawner`
future_not_send = "allow"
implicit_return = "allow"
integer_division_remainder_used = "allow"
iter_nth_zero = "allow"
manual_async_fn = "allow"
match_bool = "allow"
min_ident_chars = "allow"
missing_errors_doc = "allow"
missing_trait_methods = "allow"
module_name_repetitions = "allow"
multiple_crate_versions = "allow"
obfuscated_if_else = "allow"
pattern_type_mismatch = "allow"
pub_use = "allow"
pub_with_shorthand = "allow"
question_mark_used = "allow"
self_named_module_files = "allow"
separated_literal_suffix = "allow"
shadow_reuse = "allow"
shadow_unrelated = "allow"
similar_names = "allow"
single_call_fn = "allow"
too_long_first_doc_paragraph = "allow"
unreachable = "allow"
used_underscore_binding = "warn"

# Uncomment before ship to reconcile use of possibly redundant crates, debug remnants, missing
# license files and more
#cargo = { level = "warn", priority = -1 }
#cargo_common_metadata = "warn"
#missing_docs_in_private_items = "warn"
#restriction = { level = "warn", priority = -1 }
#warnings = "deny"

# Safety-critical application lints (always list last to prevent overriding)
all = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "deny", priority = -1 }
float_cmp_const = "deny"
indexing_slicing = "deny"
arithmetic_side_effects = "deny"
unwrap_used = "deny"
